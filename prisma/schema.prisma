// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}


model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  image         String?
  phone         String?
  streetAddress String?
  postalCode    String?
  city          String?
  country       String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        OrderProduct[]
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Product {
  id String @id @default(cuid())
  name String 
  description String
  image String
  order Int @default(autoincrement())
  basePrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sizes Size[]
  extra Extra[]
  orders OrderProduct[]
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Size{
  id String @id @default(cuid())
  name ProductSizes
  price Float
  product Product @relation(fields: [productId], references: [id] , onDelete: Cascade) 
  productId String
}

model Extra{
  id String @id @default(cuid())
  name ProductExtra
  price Float
  product Product @relation(fields: [productId], references: [id] , onDelete: Cascade) 
  productId String
}

model Category{
  id String @id @default(cuid())
  name String
  order Int @default(autoincrement())
  products Product[]
}

model Order{
  id String @id @default(uuid())
  paid Boolean @default(false)
  subTotal Float
  deliveryFee Float
  totalPrice Float
  userEmail String
  phone String
  streetAddress String
  city String
  country String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products OrderProduct[]
}

model OrderProduct{
  id String @id @default(uuid())
  quantity Int

  Order Order @relation(fields: [orderId], references: [id])
  orderId String
 
  User User? @relation(fields: [userId],references: [id])
  userId String?

  Product Product @relation(fields: [productId], references: [id])
  productId String
}




enum ProductSizes {
  SINGLE
  DOUBLE
  TRIBLE
}
enum ProductExtra {
  CHEESE
  BACON
  TOMATO
  ONION
  PEPPER
}
enum UserRole {
 USER
 ADMIN
}